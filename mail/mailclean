#!/bin/bash
#
# Script di archivazione delle caselle di posta in formato maildir
# Archivia o cancella i messaggi piu vecchi di una certa data per l' account fornito come parametro
# 
# author Pucci
#

##
##########################################################  Variabili #####################################################
##
VIRTUAL_DOMAIN_FOLDER=/home/vmail  # CARTELLA CONTENTE I VARI VIRTUAL DOMAIN DI POSTA es. /home/vmail/
DOMAIN="";
USERID="";
DATE_THRESHOLD=""; # giorni da tenere in linea

#TRY_RUN="-n" # simula le operazioni
TRY_RUN="" # esegui le operazioni senza simulare
SCRIPT_VERSION="0.1 - venerdì, 28. dicembre 2012"
###########################################################################################################################

##
##########################################################  Funzioni ######################################################
##

Usage() {
   cat << END_OF_HELP

    Script `basename $0` ($SCRIPT_VERSION)
    Utilizzo:
	      ./`basename $0`  email@domain.tld  giorni  operazione
              Es. ./`basename $0` pucci.marcello@tld.com 36 archive|delete
              Archivia oppure cancella la posta per l' utente pucci.marcello@tld.com mantenendo gli ultimi 36 giorni
END_OF_HELP
}


# Verifica il numero di parametri (almeno due: con il nome account e i giorni da tenere in linea)
checkNumParam() {
	if [ ${1} -lt 3 ]; then
		echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] Numero errato di parametri "
		Usage;
		exit 1;
	else 
		return 0;
	fi;
}

# Verifica che l' indirizzo mail $1 da archiviare sia sintatticamente corretto
checkMailAddress() {
	if `echo ${1} | grep -e ".@." 1>/dev/null 2>&1` ; then
		return 0;
	else
		echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] Indirizzo mail ${1} non valido"
		exit 1;
	fi;
}

# $1 nella forma user@domain.tld
getUSERID() {
	USERID=`echo ${1} | cut -f1 -d'@'`;
	return 0;
}

# $1 nella forma user@domain.tld
getDOMAIN() {
	DOMAIN=`echo ${1} | cut -f2 -d'@'`;
	return 0;
}

# Verifica che esista la cartella di posta (in formato MH) per l' account $1
checkMailFolderExists() {
	if [ ! -z ${1} ] && [ -d ${2} ] ; then
		return 0;
	else 
		echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] Non esiste la cartella di posta ${1} in ${2} "
		exit 1;
	fi;
}

checkNumeric() {
	[[ $1 =~ ^[0-9]+$ ]] && return 0 || echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] $1 non e' un numero intero positivo " && exit 1;
}


checkRequiredPackages() {
	type cleanup-maildir.py  > /dev/null && return 0 || echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] Missing required package cleanup-maildir.py" && exit 1;
}

checkValidOperation() {
	[[ $1 =~ ^(archive|delete)$ ]] && return 0 || echo "[ERRORE] ["$(date +%Y"-"%m"-"%d" "%H":"%M":"%S)"] $1 non e' una operazione valida " && exit 1;	
}


##
##########################################################  Main   ##################################################### 
##


# 1 - Verifiche

checkRequiredPackages # Verifica la presenza dei pacchetti richiesti

checkNumParam $#  # Verifica che siano passati tre argomenti dalla linea di comando
 
checkNumeric ${2} # Verifica che il secondo parametro sia un intero positivo

checkMailAddress ${1}  # Verifica che il primo parametro sia un indirizzo mail valido

getUSERID ${1};
getDOMAIN ${1};
DATE_THRESHOLD=${2};

checkValidOperation ${3} # Verifica che sia una operazione valida archive|delete

checkMailFolderExists ${USERID} ${VIRTUAL_DOMAIN_FOLDER}/${DOMAIN}/${USERID} # Verifica l' esistenza della cartella di posta per l' account


# 2 - Prepara l' archivio di destinazione
LOG_FILE=./$(date +"%F").log # CARTELLA CONTENTE IL LOG DELLE OPERAZIONI DI ARCHIVIAZIONE

# 3 - Archiviazione

BASEDIR=${VIRTUAL_DOMAIN_FOLDER}/${DOMAIN}/${USERID};

echo -e '\E[47;31m'"\033[1m Inizio elaborazione per l' account di posta ${1} nella cartella ${BASEDIR} (verranno mantenuti in linea ${DATE_THRESHOLD} giorni) ... \033[0m";

OIFS="$IFS"

IFS="$(echo -e "\n\r")"
for folder in `find $BASEDIR -maxdepth 1 -type d \! -iregex '.*archiv.*' \! -name cur \! -name tmp \! -name new \! -name courierimaphieracl \! -name courierimapkeywords |sort `
do

	folder=$(basename "$folder");
	
	if [ "${folder}" = "${USERID}" ]; then folder=INBOX; fi;
	
	while true  # chiedi conferma all' utente per ogni singola cartella
	do

		echo -e "Vuoi processare la cartella ${folder} [y|n] ?"
		
        read CONFIRM

        case $CONFIRM in
             s|y|Y|S|YES|yes|Yes|Si|SI)
				
				case ${3} in # cancella o archivia
					archive)
						#cleanup-maildir.py --archive-folder=Archivio${folder} --maildir-root=$BASEDIR --folder-prefix= --age=${DATE_THRESHOLD} -d 1 --keep-flagged-threads $TRY_RUN archive ${folder}
						cleanup-maildir.py --archive-folder=Archivio${folder} --maildir-root=$BASEDIR --folder-prefix= --age=${DATE_THRESHOLD} -d 1 $TRY_RUN archive ${folder}
						;;
					delete)
						#cleanup-maildir.py --maildir-root=$BASEDIR --folder-prefix= --age=${DATE_THRESHOLD} --keep-flagged-threads $TRY_RUN delete ${folder}
						cleanup-maildir.py --maildir-root=$BASEDIR --folder-prefix= --age=${DATE_THRESHOLD} $TRY_RUN delete ${folder}
						;;
					*)
						echo "${3} non è un' operazione valida"
						;;
				esac
		 		break 
		 		;;
			
             n|N|no|NO|No)
                echo "La cartella ${folder} non verrà processata"                
		 		break
                 ;;

             *) echo "Digitare y o n"
         esac;

	done;

done;

IFS="$OIFS"

echo -e '\E[47;31m'"\033[1m Inizio elaborazione per l' account di posta ${1} nella cartella ${BASEDIR} (verranno mantenuti in linea ${DATE_THRESHOLD} giorni) ... \033[0m";

